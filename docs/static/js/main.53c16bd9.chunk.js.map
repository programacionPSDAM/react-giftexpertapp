{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"2MAoCeA,EAjCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAiBzC,OACI,sBAAMC,SAXS,SAACC,GAChBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAOlB,SAEI,uBAEIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCOhBG,EAdF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,0FACkFC,UAAUH,GAD5F,sBAEMI,MAAMF,GAFZ,cAENG,EAFM,gBAGWA,EAAIC,OAHf,uBAGJC,EAHI,EAGJA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAR/B,kBAWLM,GAXK,4CAAH,sDCUEO,EAVK,SAAC,GAAyB,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAE9B,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,kCAAKA,EAAL,WCsCGS,EArCC,SAAC,GAAqB,IAAlBrB,EAAiB,EAAjBA,UAAiB,ECHT,SAACA,GAAe,IAAD,EACbd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAkBvC,OAZAC,qBAAY,WACR1B,EAAQC,GACH0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGvB,CAACtB,IAIIuB,EDdyBK,CAAa5B,GAAhCa,EADoB,EAC1BN,KAAce,EADY,EACZA,QAarB,OAXAN,QAAQC,IAAIK,GAYR,qCACK,mCAAOtB,EAAP,OACCsB,GAAW,6CACb,qBAAKJ,UAAU,YAAf,SAEI,6BAEQL,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,eEG1BkB,EA7BM,WAAM,MAGa3C,mBAAS,CAAC,YAHvB,mBAGhB4C,EAHgB,KAGJ7C,EAHI,KAUtB,OACG,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAS,OACzB,cAAC,EAAD,CAEIA,UAAYA,GADNA,YChB9B+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.53c16bd9.chunk.js","sourcesContent":["import { useState } from \"react\"\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( { setCategorias } ) => {\n    const [inputValue, setInputvalue] = useState('')\n\n    const handleInputChange = (e) =>  {\n        setInputvalue(e.target.value)\n    }\n\n    const hadlSubmit = (e) => {\n        e.preventDefault(); //previene el refresco del navegador, hay que hacerlo SI o SI\n        if (inputValue.trim().length > 2){\n            setCategorias(cats => [inputValue,...cats])\n            setInputvalue('');\n\n        }\n        //console.log('hecho.')\n    }\n    \n    return (\n        <form onSubmit = {hadlSubmit}>\n            \n            <input \n            \n                type=\"text\"\n                value={ inputValue }\n                onChange= {handleInputChange}\n            />\n        </form> \n    )\n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}\nexport default AddCategory","const getGifs = async (categoria) => {\n    const url =`https://api.giphy.com/v1/gifs/search?api_key=bMso0lvlIrnO3090x7bfVlSSPIIkiNYh&q=${encodeURI(categoria) }&limit=10`\n    const res = await fetch(url)\n    const { data } = await res.json()\n    const gifs = data.map (img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url : img.images?.downsized_medium.url  //? por sin no vienen imagenes\n        }\n    })\n    return gifs;\n    \n}\nexport default getGifs","const GifGridItem = ( {id, title, url } ) => {\n    console.log(id, title, url)\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p> {title} </p>\n        </div>\n    )\n\n}\nexport default GifGridItem","//import { useState, useEffect } from \"react\"\n//import getGifs from \"../helpers/getGifs\"\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\nimport GifGridItem from \"./GifGridItem\"\n\n\nconst GifGrid = ( { categoria } ) => {\n    const {data: images, loading} = useFetchGifs(categoria);\n   // console.log(data)\n    console.log(loading)\n\n    \n    // const [images, setImages] = useState ([])\n    // useEffect ( () => {\n    //     getGifs(categoria)\n    //     .then(setImages)\n    // }, [categoria])   //[] no tiene dependencias, se ejecuta solo una vez\n\n    \n  //  getGifs();\n    return (\n        <>\n             <h3> { categoria } </h3>\n             {loading && <p>Loading ....</p> }\n            <div className=\"card-grid\">\n            \n                <ol>\n                { \n                        images.map((img) => (\n                            <GifGridItem  \n                                key={img.id}\n                                {...img}\n                                />\n                        ))\n                \n                }\n                </ol>\n            </div>\n        </>\n       \n    )\n}\n\nexport default GifGrid","import { useEffect, useState } from \"react\"\nimport getGifs from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (categoria) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect ( () => {\n        getGifs(categoria)\n            .then (imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    },[categoria])\n\n    \n\n    return state\n}","import { Fragment, useState } from \"react\"\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    // const categorias = ['jaén', 'córdoba', 'granada', 'sevilla', 'málaga'];\n    const [categorias, setCategorias] = useState(['jaén']);\n\n    // const handleAdd = () => {\n    //    // categorias.push('almería');\n    //    //setCategorias([...categorias, 'almería'])\n    //    //setCategorias(cats => [...categorias, inputValue])\n    // }\n     return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategorias={setCategorias}/>\n            <hr />\n            <ol>\n                {\n                    categorias.map( categoria =>  (\n                    <GifGrid  \n                        key= {categoria}\n                        categoria= {categoria}\n                    />\n                    ))\n                }\n            </ol>\n        </Fragment>\n    )\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}